class LRUCache {
    class Node { int key, val; Node prev, next; }
    private void add(Node n) { /*...*/ }
    private void remove(Node n) { /*...*/ }
    private Map<Integer, Node> map = new HashMap<>();
    private Node head = new Node(), tail = new Node();
    private int capacity;
    public LRUCache(int cap) {
        capacity = cap;
        head.next = tail; tail.prev = head;
    }
    public int get(int key) {
        if (!map.containsKey(key)) return -1;
        Node n = map.get(key);
        remove(n);
        add(n);
        return n.val;
    }
    public void put(int key, int val) {
        if (map.containsKey(key)) {
            remove(map.get(key));
        }
        Node n = new Node();
        n.key = key; n.val = val;
        map.put(key, n);
        add(n);
        if (map.size() > capacity) {
            Node lru = tail.prev;
            remove(lru);
            map.remove(lru.key);
        }
    }
}
